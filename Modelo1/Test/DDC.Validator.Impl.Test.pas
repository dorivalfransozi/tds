unit DDC.Validator.Impl.Test;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework,
  System.Generics.Collections,
  DDC.Validate.MinLength,
  DDC.Validate,
  DDC.Validator.Extend,
  DDC.Validator.Impl,
  DDC.Validator,
  FM.Model.Base,
  System.StrUtils,
  System.Classes,
  System.Rtti,
  Delphi.Mocks;

type
  TModelMock = class(TModelBase)
  private
    FMaxLength: String;
    FMinValue: Integer;
    FIsNaturalNoZero: Integer;
    FIsNatural: Integer;
    FMinLength: String;
    FExactLength: String;
    FValidMail: String;
    FRequired: string;
    FMaxValue: Integer;
    FIsInteger: Integer;
    FRegexValidate: string;
  public
    [TIsInteger('IsInteger')]
    property IsInteger: Integer read FIsInteger write FIsInteger;

    [TIsNatural('IsNatural')]
    property IsNatural: Integer read FIsNatural write FIsNatural;

    [TIsNaturalNoZero('IsNaturalNoZero')]
    property IsNaturalNoZero: Integer read FIsNaturalNoZero write FIsNaturalNoZero;

    [TMaxValue(1, 'MaxValue')]
    property MaxValue: Integer read FMaxValue write FMaxValue;

    [TMinValue(1, 'MinValue')]
    property MinValue: Integer read FMinValue write FMinValue;

    [TMinLength(1, 'MinLength')]
    property MinLength: String read FMinLength write FMinLength;

    [TMaxLength(1, 'MaxLength')]
    property MaxLength: String read FMaxLength write FMaxLength;

    [TExactLength(1, 'ExactLength')]
    property ExactLength: String read FExactLength write FExactLength;

    [TValidEmail('ValidMail')]
    property ValidMail: String read FValidMail write FValidMail;

    [TRegexValidate('[A-Z]', 'RegexValidate')]
    property RegexValidate: string read FRegexValidate write FRegexValidate;

    [TRequired('Required')]
    property Required: string read FRequired write FRequired;

    function New: TModelBase; override;
  end;

type
  // Test methods for class TValidator
  TestTValidator = class(TTestCase)
  strict private
    FModel: TModelMock;
    FValidator: IValidator<TModelMock>;
  private
    procedure SetValueTrue;
    procedure SetValueFalse;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure ModeloValido;
    procedure ModeloInvalido;
    procedure ErrorMessagesInvalido;
    procedure ErrorMessagesValido;
    procedure TestAddExtend;
  end;

implementation




procedure TestTValidator.SetUp;
begin
  FModel     := TModelMock.Create;
  FValidator := TValidator<TModelMock>.Create;
end;



procedure TestTValidator.SetValueFalse;
begin
  (FModel as TModelMock).IsInteger       := 0;
  (FModel as TModelMock).IsNatural       := -1;
  (FModel as TModelMock).IsNaturalNoZero := 0;
  (FModel as TModelMock).MaxValue        := 11;
  (FModel as TModelMock).MinValue        := 0;
  (FModel as TModelMock).MaxLength       := '11';
  (FModel as TModelMock).MinLength       := '';
  (FModel as TModelMock).ExactLength     := '11';
  (FModel as TModelMock).ValidMail       := 'eurides.sysmo.com.br';
  (FModel as TModelMock).RegexValidate   := 'abc';
  (FModel as TModelMock).Required        := '';
end;



procedure TestTValidator.SetValueTrue;
begin
  (FModel as TModelMock).IsInteger       := 1;
  (FModel as TModelMock).IsNatural       := 1;
  (FModel as TModelMock).IsNaturalNoZero := 1;
  (FModel as TModelMock).MaxValue        := 1;
  (FModel as TModelMock).MinValue        := 1;
  (FModel as TModelMock).MaxLength       := '1';
  (FModel as TModelMock).MinLength       := '1';
  (FModel as TModelMock).ExactLength     := '1';
  (FModel as TModelMock).ValidMail       := 'eurides@sysmo.com.br';
  (FModel as TModelMock).RegexValidate   := 'ABC';
  (FModel as TModelMock).Required        := '1';
end;



procedure TestTValidator.TearDown;
begin
  FModel.Free;
  FModel := nil;
end;



procedure TestTValidator.ModeloValido;
begin
  SetValueTrue;
  CheckFalse(FValidator.Make(FModel).Fails, 'Erro ao validar modelo');
end;



procedure TestTValidator.ErrorMessagesValido;
begin
  SetValueTrue;
  FValidator.Make(FModel);
  CheckTrue(FValidator.ErrorMessages.Count = 0, 'Erro ao validar modelo');
end;



procedure TestTValidator.ModeloInvalido;
begin
  SetValueFalse;
  CheckTrue(FValidator.Make(FModel).Fails, 'Erro ao validar modelo');
end;



procedure TestTValidator.ErrorMessagesInvalido;
begin
  SetValueFalse;
  FValidator.Make(FModel);
  CheckTrue(FValidator.ErrorMessages.Count = 10, 'Erro ao validar modelo');
end;



procedure TestTValidator.TestAddExtend;
begin
  SetValueTrue;
  FValidator.AddExtend(1, 'Teste extend: valor informado %s  é igual a 1.',
    function(const AValue: TValue): Boolean
    begin
      result := AValue.AsInteger <> 1;
    end
    );

  FValidator.Make(FModel);
  CheckTrue(FValidator.ErrorMessages.Count = 1, 'Erro ao validar extend');
end;

{ TModelMock }



function TModelMock.New: TModelBase;
begin
  result := TModelMock.Create;
end;

initialization

// Register any test cases with the test runner
RegisterTest(TestTValidator.Suite);

end.
